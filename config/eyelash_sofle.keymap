#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    HMShiftR: HMShiftR {
        compatible = "zmk,behavior-hold-tap";
        label = "HMSHIFTR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        hold-trigger-key-positions = <0 1 2 3 4 5 18 17 16 15 14 13 26 27 28 29 30 42 43 54 55 44 31 41 53 40 39 56 57 52 60>;
        require-prior-idle-ms = <150>;
        quick-tap-ms = <150>;
        hold-trigger-on-release;
        flavor = "balanced";
    };

    HMShiftL: HMShiftL {
        compatible = "zmk,behavior-hold-tap";
        label = "HMSHIFTL";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 6 19 32 45 58 57 39 29>;
        flavor = "balanced";
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        hold-trigger-on-release;
    };

    HMOptionL: HMOptionL {
        compatible = "zmk,behavior-hold-tap";
        label = "HMOPTIONL";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 6 19 32 45 58 57 39>;
        flavor = "balanced";
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        hold-trigger-on-release;
    };

    HMOptionR: HMOptionR {
        compatible = "zmk,behavior-hold-tap";
        label = "HMOPTIONR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        hold-trigger-key-positions = <0 1 2 3 4 5 18 17 16 15 14 13 26 27 28 29 30 42 43 54 55 44 31 41 53 40 39 56 57 52 60>;
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        flavor = "balanced";
    };

    VimNormalG: VimNormalG {
        compatible = "zmk,behavior-tap-dance";
        label = "VIMNORMALG";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LC(END)>, <&kp LC(HOME)>;
    };

    CAPS_WORDS: CAPS_WORDS {
        compatible = "zmk,behavior-caps-word";
        label = "CAPS_WORDS";
        #binding-cells = <0>;
        continue-list = <UNDERSCORE SPACE BACKSPACE>;
    };

    NUM_WORD: NUM_WORD {
        compatible = "zmk,behavior-caps-word";
        label = "NUM_WORD";
        #binding-cells = <0>;
        continue-list = <NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 MINUS PLUS BACKSPACE SPACE DOT COMMA>;
        mods = <(MOD_LSFT)>;
    };

    AmpersandOnDouble: AmpersandOnDouble {
        compatible = "zmk,behavior-tap-dance";
        label = "AMPERSANDONDOUBLE";
        #binding-cells = <0>;
        bindings = <&kp U>, <&kp AMPS>;

        tapping-term-ms = <120>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        softoff {
            bindings = <&soft_off>;
            key-positions = <14 28 40>;
        };

        Pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <34 35>;
            layers = <3>;
        };

        PageDown {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <34 31>;
            layers = <2>;
        };

        ToggleCaps {
            bindings = <&CAPS_WORDS>;
            key-positions = <39 51>;
            layers = <0>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <21 22>;
            layers = <0>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <22 23>;
            layers = <0>;
        };

        LeftParenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <47 48>;
            layers = <0>;
        };

        RightParenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <48 49>;
            layers = <0>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <34 35>;
            layers = <0>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <34 21>;
            layers = <0>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <34 33>;
            layers = <0>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <20 21>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <46 47>;
            layers = <0>;
        };

        DeleteWord {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <21 22 23>;
            layers = <0>;
        };

        Sleep {
            bindings = <&kp K_SLEEP>;
            key-positions = <28 36>;
            layers = <3>;
        };

        NumWordsStart {
            bindings = <&NUM_WORD>;
            key-positions = <46 21>;
        };

        Exclamation {
            bindings = <&kp EXCL>;
            key-positions = <14 15>;
            layers = <0>;
        };

        AtSighn {
            bindings = <&kp AT>;
            key-positions = <15 16>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <16 17>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <17 18>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <18 31>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <22 23>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC          &kp N1     &kp N2                  &kp N3                 &kp N4            &kp N5         &mmv MOVE_UP     &kp N6       &kp N7              &kp N8                  &kp N9                   &kp N0             &kp LEFT_BRACKET
&kp TAB          &kp Q      &kp W                   &kp E                  &kp R             &kp T          &mmv MOVE_DOWN   &kp Y        &AmpersandOnDouble  &kp I                   &kp O                    &kp P              &kp RIGHT_BRACKET
&kp LEFT_SHIFT   &kp A      &HMShiftL LEFT_SHIFT S  &HMOptionL LEFT_ALT D  &kp F             &kp G          &mmv MOVE_LEFT   &kp H        &kp J               &HMOptionR RIGHT_ALT K  &HMShiftR RIGHT_SHIFT L  &kp SEMI           &kp APOS
&mt LCTRL GRAVE  &kp Z      &kp X                   &kp C                  &kp V             &kp B          &mmv MOVE_RIGHT  &kp N        &kp M               &kp COMMA               &kp DOT                  &kp FSLH           &kp BACKSLASH
&kp C_MUTE       &kp GRAVE  &kp LEFT_ALT            &mo 4                  &mt LEFT_GUI ESC  &lt 1 SPACE    &mkp LCLK        &lt 1 SPACE  &kp RIGHT_GUI       &kp ENTER               &lt 3 LEFT_BRACKET       &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Navigation {
            bindings = <
&trans  &kp F1             &kp F2     &kp F3  &kp F4  &kp F5         &msc SCRL_UP     &kp F6      &kp F7             &kp F8           &kp F9                    &kp F10           &trans
&trans  &kp F11            &trans     &trans  &trans  &trans         &msc SCRL_DOWN   &kp K_COPY  &kp K_UNDO         &kp INSERT       &kp K_BACK                &kp K_PASTE       &kp PLUS
&trans  &trans             &trans     &trans  &trans  &VimNormalG    &msc SCRL_LEFT   &kp LEFT    &kp DOWN           &kp UP_ARROW     &kp RIGHT                 &kp LBRC          &kp RBRC
&trans  &kp K_SCROLL_DOWN  &kp K_CUT  &trans  &trans  &kp K_BACK     &msc SCRL_RIGHT  &kp HOME    &kp K_SCROLL_DOWN  &kp K_SCROLL_UP  &kp END                   &kp QUESTION      &trans
&trans  &trans             &trans     &trans  &trans  &trans         &mkp RCLK        &kp SPACE   &trans             &trans           &kp LS(LG(LEFT_BRACKET))  &kp RS(RG(RBKT))
            >;

            display-name = "layer2";
            sensor-bindings = <&inc_dec_kp C_AL_FILE_BROWSER C_BRIGHTNESS_DEC>;
        };

        Symbols {
            bindings = <
&trans      &trans  &trans  &trans        &trans                &trans            &mmv MOVE_UP     &trans           &trans                 &trans      &trans                    &trans            &trans
&trans      &trans  &trans  &kp KP_EQUAL  &trans                &trans            &mmv MOVE_DOWN   &kp PG_UP        &kp UNDERSCORE         &trans      &trans                    &kp KP_PLUS       &trans
&trans      &trans  &trans  &kp LBKT      &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &mmv MOVE_LEFT   &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RBKT    &trans                    &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &trans  &trans  &trans        &trans                &trans            &mmv MOVE_RIGHT  &trans           &kp KP_MINUS           &kp KP_DOT  &kp LS(SLASH)             &trans            &trans
&kp C_MUTE  &trans  &trans  &trans        &trans                &trans            &mkp LCLK        &trans           &trans                 &trans      &kp LS(LG(LEFT_BRACKET))  &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        System {
            bindings = <
&trans  &trans  &trans  &trans           &rgb_ug RGB_BRI  &trans             &trans  &trans      &trans        &trans        &trans      &trans  &trans
&trans  &trans  &trans  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF    &trans  &trans      &trans        &trans        &trans      &trans  &trans
&trans  &trans  &trans  &trans           &rgb_ug RGB_BRD  &trans             &trans  &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans  &trans  &trans  &trans           &trans           &trans             &trans  &trans      &trans        &trans        &trans      &trans  &trans
&trans  &trans  &trans  &trans           &trans           &trans             &trans  &trans      &trans        &trans        &trans      &trans
            >;

            display-name = "layer3";
            sensor-bindings = <&scroll_encoder>;
        };

        NumLayer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans        &trans        &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &kp NUMBER_7  &kp N8        &kp N9        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &kp NUMBER_4  &kp N5        &kp N6        &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &trans    &trans  &kp KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans        &trans        &trans        &trans
            >;

            display-name = "layer4";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
